import logging
from typing import Dict
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from config import SERVICE_NAME, SERVICE_PRICE_RUB, MESSAGES, ADMIN_CONTACT, PHONE_NUMBER
from database.manager import DatabaseManager, Booking
from calendar_api.manager import GoogleCalendarManager
from services.booking import BookingService
from .keyboards import BotKeyboards
from utils.helpers import format_date, format_booking_list

logger = logging.getLogger(__name__)

class BotHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

    def __init__(self):
        self.keyboards = BotKeyboards()
        self.booking_service = BookingService()
        self.user_sessions: Dict[int, Dict] = {}  # –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        await update.message.reply_text(
            MESSAGES['welcome'],
            reply_markup=self.keyboards.main_menu()
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/mybookings - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n\n"
            "üí° <b>–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è\n"
            "4. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å\n"
            "6. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {SERVICE_PRICE_RUB} —Ä—É–±.\n"
            f"üìû <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {ADMIN_CONTACT}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {PHONE_NUMBER}"
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.message:
            await update.message.reply_text(
                help_text,
                parse_mode='HTML',
                reply_markup=self.keyboards.back_to_main()
            )
        else:
            query = update.callback_query
            await query.edit_message_text(
                help_text,
                parse_mode='HTML',
                reply_markup=self.keyboards.back_to_main()
            )

    async def my_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        bookings = self.booking_service.get_user_future_bookings(user.id)

        # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏." if not bookings else \
              "üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n" + format_booking_list(bookings)
        new_markup = self.keyboards.back_to_main()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        try:
            if update.message:
                await update.message.reply_text(
                    new_text,
                    parse_mode='HTML',
                    reply_markup=new_markup
                )
            else:
                query = update.callback_query
                current_text = query.message.text
                current_markup = query.message.reply_markup

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                if current_text != new_text or str(current_markup) != str(new_markup):
                    await query.edit_message_text(
                        new_text,
                        parse_mode='HTML',
                        reply_markup=new_markup
                    )
                else:
                    await query.answer("–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            if not update.message:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def show_available_dates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        query = update.callback_query
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await query.edit_message_text(
            "‚åõ –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã...",
            reply_markup=self.keyboards.main_menu(processing=True)
            )
        try:
            logger.info("–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...")
            available_slots = self.booking_service.get_available_slots()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(available_slots)}")

            if not available_slots:
                logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")

                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                diagnostic_text = (
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –í—Å–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\n"
                    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

                await query.edit_message_text(
                    diagnostic_text,
                    reply_markup=self.keyboards.back_to_main()
                )
                return

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
            dates = {}
            for slot in available_slots:
                date = slot.date
                if date not in dates:
                    dates[date] = []
                dates[date].append(slot)

            logger.info(f"–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–∞–º: {list(dates.keys())}")

            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=self.keyboards.dates_keyboard(dates)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=self.keyboards.back_to_main()
                )

    async def show_available_times(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()

        date = query.data.split('_')[-1]
        date_formatted = format_date(date)

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –≤—Ä–µ–º–µ–Ω–∏
            await query.edit_message_text(
                f"‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {date_formatted}...",
                reply_markup=self.keyboards.processing_keyboard()
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
            available_slots = self.booking_service.get_available_slots()
            times = [slot for slot in available_slots if slot.date == date]

            if not times:
                await query.edit_message_text(
                    "üòî –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
                    reply_markup=self.keyboards.back_to_main()
                )
                return
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
            await query.edit_message_text(
                f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {date_formatted}:",
                reply_markup=self.keyboards.times_keyboard(date, times)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.keyboards.back_to_main()
            )

    async def prepare_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø–∏—Å–∏ - –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        await query.answer()

        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data (—Ñ–æ—Ä–º–∞—Ç: select_time_YYYY-MM-DD_HH-MM)
            _, _, date, time_part = query.data.split('_', 3)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HH-MM –æ–±—Ä–∞—Ç–Ω–æ –≤ HH:MM
            time = time_part.replace("-", ":")
            user = update.effective_user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
            if self.booking_service.is_slot_taken(date, time):
                await query.edit_message_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=self.keyboards.back_to_main()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_sessions[user.id] = {
                'date': date,
                'time': time,
                'username': user.username or user.first_name,
                'waiting_for_contact': True
            }

            date_formatted = format_date(date)

            await query.edit_message_text(
                f"üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å:</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {date_formatted}\n"
                f"üïê –í—Ä–µ–º—è: {time}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SERVICE_PRICE_RUB} —Ä—É–±.\n\n"
                f"{MESSAGES['ask_contact']}",
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.keyboards.back_to_main()
            )

    async def handle_contact_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        user = update.effective_user
        session_data = self.user_sessions.get(user.id)

        if not session_data or not session_data.get('waiting_for_contact'):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏

        contact_info = update.message.text.strip()

        if not contact_info or len(contact_info) < 5:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +7 900 123 45 67\n"
                "‚Ä¢ @ivan_petrov\n"
                "‚Ä¢ ivan@email.com, +7 900 123 45 67"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session_data['contact_info'] = contact_info
        session_data['waiting_for_contact'] = False

        date_formatted = format_date(session_data['date'])

        confirmation_text = (
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {date_formatted}\n"
            f"üïê –í—Ä–µ–º—è: {session_data['time']}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SERVICE_PRICE_RUB} —Ä—É–±.\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_CONTACT}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {PHONE_NUMBER}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:"
        )

        await update.message.reply_text(
            confirmation_text,
            parse_mode='HTML',
            reply_markup=self.keyboards.booking_confirmation(session_data['date'])
        )

    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        query = update.callback_query
        await query.answer()

        user = update.effective_user
        session_data = self.user_sessions.get(user.id)

        if not session_data or not session_data.get('contact_info'):
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=self.keyboards.back_to_main()
            )
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            booking_result = await self.booking_service.create_booking(
                user_id=user.id,
                username=session_data['username'],
                date=session_data['date'],
                time=session_data['time'],
                contact_info=session_data['contact_info']
            )

            if booking_result['success']:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await self.schedule_reminders(context, booking_result['booking'], booking_result['booking_id'])

                date_formatted = format_date(session_data['date'])

                await query.edit_message_text(
                    MESSAGES['booking_success'].format(
                        date=date_formatted,
                        time=session_data['time'],
                        contact=session_data['contact_info'],
                        price=SERVICE_PRICE_RUB,
                        admin_contact=ADMIN_CONTACT,
                        phone=PHONE_NUMBER
                    ),
                    parse_mode='HTML',
                    reply_markup=self.keyboards.back_to_main()
                )

                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                del self.user_sessions[user.id]
            else:
                await query.edit_message_text(
                    MESSAGES['booking_error'],
                    reply_markup=self.keyboards.back_to_main()
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            await query.edit_message_text(
                MESSAGES['booking_error'],
                reply_markup=self.keyboards.back_to_main()
            )

    async def schedule_reminders(self, context: ContextTypes.DEFAULT_TYPE, booking: Booking, booking_id: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        from utils.helpers import schedule_booking_reminders
        await schedule_booking_reminders(context, booking, booking_id)

    async def send_day_reminder(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å"""
        booking_data = context.job.data
        booking = booking_data['booking']

        date_formatted = format_date(booking.date)

        await context.bot.send_message(
            chat_id=booking.user_id,
            text=f"üìÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n"
                 f"–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
                 f"üóì –î–∞—Ç–∞: {date_formatted}\n"
                 f"üïê –í—Ä–µ–º—è: {booking.time}\n\n"
                 f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SERVICE_PRICE_RUB} —Ä—É–±.\n"
                 f"üí≥ –û–ø–ª–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_CONTACT}\n"
                 f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {PHONE_NUMBER}\n\n"
                 f"–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
            parse_mode='HTML'
        )

    async def send_hour_reminder(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å"""
        booking_data = context.job.data
        booking = booking_data['booking']

        await context.bot.send_message(
            chat_id=booking.user_id,
            text=f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n"
                 f"–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
                 f"üïê –í—Ä–µ–º—è: {booking.time}\n\n"
                 f"–£–≤–∏–¥–∏–º—Å—è —Å–∫–æ—Ä–æ!",
            parse_mode='HTML'
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        query = update.callback_query

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query
        try:
            await query.answer()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

        try:
            if query.data == 'book_appointment':
                await self.show_available_dates(update, context)
            elif query.data == 'processing':
                await query.answer("–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
            elif query.data.startswith('select_date_'):
                await self.show_available_times(update, context)
            elif query.data.startswith('select_time_'):
                await self.prepare_booking(update, context)
            elif query.data == 'confirm_booking':
                await self.confirm_booking(update, context)
            elif query.data == 'my_bookings':
                await self.my_bookings(update, context)
            elif query.data == 'help':
                await self.help_command(update, context)
            elif query.data == 'back_to_main':
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                user = update.effective_user
                if user.id in self.user_sessions:
                    del self.user_sessions[user.id]

                await query.edit_message_text(
                    MESSAGES['welcome'],
                    reply_markup=self.keyboards.main_menu()
                )
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {query.data}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {query.data}: {e}")
            try:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=self.keyboards.main_menu()
                )
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
                    reply_markup=self.keyboards.main_menu()
                )