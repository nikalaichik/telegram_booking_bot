from typing import List, Dict
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from database.models import TimeSlot

class BotKeyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞"""

    @staticmethod
    def main_menu(processing: bool = False) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("‚è≥ –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã..." if processing
                else "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                callback_data='book_appointment' if not processing else 'processing')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_bookings')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def dates_keyboard(dates: Dict[str, List]) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏"""
        keyboard = []

        for date, slots in list(dates.items())[:7]:  # –ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π
            date_obj = datetime.strptime(date, '%Y-%m-%d')

            # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            weekdays = {
                0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä', 3: '–ß—Ç',
                4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'
            }

            date_str = f"{date_obj.strftime('%d.%m')} ({weekdays[date_obj.weekday()]}) - {len(slots)} —Å–ª–æ—Ç–æ–≤"
            keyboard.append([InlineKeyboardButton(date_str, callback_data=f'select_date_{date}')])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def times_keyboard(date: str, times: List[TimeSlot]) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        keyboard = []

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        row = []
        for time_slot in times:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ TimeSlot –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—è
            time_str = time_slot.time
            row.append(InlineKeyboardButton(
                f"üïê {time_str}",
                #callback_data=f'select_time_{date}_{time_str}'
                callback_data=f'select_time_{date}_{time_str.replace(":", "-")}'
            ))

            if len(row) == 3:
                keyboard.append(row)
                row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if row:
            keyboard.append(row)

        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data='book_appointment')
        ])
        return InlineKeyboardMarkup(keyboard)
    '''@staticmethod
    def times_keyboard(date: str, times: List[Dict]) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        keyboard = []

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        row = []
        for time_slot in times:
            time_str = time_slot['time']
            row.append(InlineKeyboardButton(f"üïê {time_str}", callback_data=f'select_time_{date}_{time_str}'))

            if len(row) == 3:
                keyboard.append(row)
                row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if row:
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data='book_appointment')])
        return InlineKeyboardMarkup(keyboard)'''

    @staticmethod
    def processing_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...", callback_data='processing')]
    ])

    @staticmethod
    def booking_confirmation(date: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='confirm_booking')],
            [InlineKeyboardButton("‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f'select_date_{date}')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def back_to_main() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        return InlineKeyboardMarkup(keyboard)