import logging
from datetime import datetime, timedelta
from typing import List, Dict
from pytz import timezone
from config import REMINDER_DAYS_BEFORE, REMINDER_HOURS_BEFORE, SERVICE_PRICE_RUB
from database.models import Booking

logger = logging.getLogger(__name__)

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')

        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        weekdays = {
            0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–≤—Ç–æ—Ä–Ω–∏–∫', 2: '—Å—Ä–µ–¥–∞', 3: '—á–µ—Ç–≤–µ—Ä–≥',
            4: '–ø—è—Ç–Ω–∏—Ü–∞', 5: '—Å—É–±–±–æ—Ç–∞', 6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }

        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        months = {
            1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
            5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
            9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
        }

        day = date_obj.day
        month = months[date_obj.month]
        weekday = weekdays[date_obj.weekday()]

        return f"{day} {month} ({weekday})"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã {date_str}: {e}")
        return date_str

def format_booking_list(bookings: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not bookings:
        return "–ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    formatted_bookings = []

    for booking in bookings:
        date_formatted = format_date(booking['date'])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_icons = {
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
        }

        status = status_icons.get(booking['status'], booking['status'])

        booking_text = (
            f"üìÖ {date_formatted}\n"
            f"üïê {booking['time']}\n"
            f"üë§ {booking['contact_info']}\n"
            f"üìã {status}\n"
            f"üí∞ {SERVICE_PRICE_RUB} —Ä—É–±.\n"
        )

        formatted_bookings.append(booking_text)

    return "\n".join(formatted_bookings)

async def schedule_booking_reminders(context, booking: Booking, booking_id: int):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å–∏"""
    try:
        tz = timezone('Europe/Minsk')
        # 2. –°–æ–∑–¥–∞–µ–º "–Ω–∞–∏–≤–Ω—ã–π" –æ–±—ä–µ–∫—Ç datetime
        appointment_datetime_naive = datetime.strptime(f"{booking.date} {booking.time}", "%Y-%m-%d %H:%M")
        # 3. –î–µ–ª–∞–µ–º –µ–≥–æ "–æ—Å–æ–∑–Ω–∞—é—â–∏–º" —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        appointment_datetime = tz.localize(appointment_datetime_naive)
        #appointment_datetime = datetime.strptime(f"{booking.date} {booking.time}", "%Y-%m-%d %H:%M")
        current_time = datetime.now(tz)

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
        reminder_day = appointment_datetime - timedelta(days=REMINDER_DAYS_BEFORE)
        if reminder_day > current_time:
            context.job_queue.run_once(
                send_day_reminder,
                reminder_day,
                data={'booking_id': booking_id, 'booking': booking},
                name=f"day_reminder_{booking_id}"
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏ {booking_id}")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å
        reminder_hour = appointment_datetime - timedelta(hours=REMINDER_HOURS_BEFORE)
        if reminder_hour > current_time:
            context.job_queue.run_once(
                send_hour_reminder,
                reminder_hour,
                data={'booking_id': booking_id, 'booking': booking},
                name=f"hour_reminder_{booking_id}"
            )
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ {booking_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def send_day_reminder(context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å"""
    from config import ADMIN_CONTACT, PHONE_NUMBER

    booking_data = context.job.data
    booking = booking_data['booking']

    date_formatted = format_date(booking.date)

    await context.bot.send_message(
        chat_id=booking.user_id,
        text=f"üìÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n"
             f"–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
             f"üóì –î–∞—Ç–∞: {date_formatted}\n"
             f"üïê –í—Ä–µ–º—è: {booking.time}\n\n"
             f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {SERVICE_PRICE_RUB} —Ä—É–±.\n"
             f"üí≥ –û–ø–ª–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_CONTACT}\n"
             f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {PHONE_NUMBER}\n\n"
             f"–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
        parse_mode='HTML'
    )

async def send_hour_reminder(context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å"""
    booking_data = context.job.data
    booking = booking_data['booking']

    await context.bot.send_message(
        chat_id=booking.user_id,
        text=f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n"
             f"–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
             f"üïê –í—Ä–µ–º—è: {booking.time}\n\n"
             f"–£–≤–∏–¥–∏–º—Å—è —Å–∫–æ—Ä–æ!",
        parse_mode='HTML'
    )
